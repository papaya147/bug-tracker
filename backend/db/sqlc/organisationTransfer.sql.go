// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organisationTransfer.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrganisationTransfer = `-- name: CreateOrganisationTransfer :one
INSERT INTO organisationTransfer (organisation, fromProfile, toProfile)
VALUES ($1, $2, $3)
RETURNING organisation, fromprofile, toprofile, completed, createdat
`

type CreateOrganisationTransferParams struct {
	Organisation uuid.UUID `json:"organisation"`
	Fromprofile  uuid.UUID `json:"fromprofile"`
	Toprofile    uuid.UUID `json:"toprofile"`
}

func (q *Queries) CreateOrganisationTransfer(ctx context.Context, arg CreateOrganisationTransferParams) (Organisationtransfer, error) {
	row := q.db.QueryRow(ctx, createOrganisationTransfer, arg.Organisation, arg.Fromprofile, arg.Toprofile)
	var i Organisationtransfer
	err := row.Scan(
		&i.Organisation,
		&i.Fromprofile,
		&i.Toprofile,
		&i.Completed,
		&i.Createdat,
	)
	return i, err
}
