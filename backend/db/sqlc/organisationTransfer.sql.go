// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organisationTransfer.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const completeOrganisationTransfer = `-- name: CompleteOrganisationTransfer :one
UPDATE organisationTransfer
SET completed = true
WHERE id = $1
    AND toProfile = $2
RETURNING id, organisation, fromprofile, toprofile, completed, createdat
`

type CompleteOrganisationTransferParams struct {
	ID        uuid.UUID `json:"id"`
	Toprofile uuid.UUID `json:"toprofile"`
}

func (q *Queries) CompleteOrganisationTransfer(ctx context.Context, arg CompleteOrganisationTransferParams) (Organisationtransfer, error) {
	row := q.db.QueryRow(ctx, completeOrganisationTransfer, arg.ID, arg.Toprofile)
	var i Organisationtransfer
	err := row.Scan(
		&i.ID,
		&i.Organisation,
		&i.Fromprofile,
		&i.Toprofile,
		&i.Completed,
		&i.Createdat,
	)
	return i, err
}

const createOrganisationTransfer = `-- name: CreateOrganisationTransfer :one
INSERT INTO organisationTransfer (id, organisation, fromProfile, toProfile)
VALUES ($1, $2, $3, $4)
RETURNING id, organisation, fromprofile, toprofile, completed, createdat
`

type CreateOrganisationTransferParams struct {
	ID           uuid.UUID `json:"id"`
	Organisation uuid.UUID `json:"organisation"`
	Fromprofile  uuid.UUID `json:"fromprofile"`
	Toprofile    uuid.UUID `json:"toprofile"`
}

func (q *Queries) CreateOrganisationTransfer(ctx context.Context, arg CreateOrganisationTransferParams) (Organisationtransfer, error) {
	row := q.db.QueryRow(ctx, createOrganisationTransfer,
		arg.ID,
		arg.Organisation,
		arg.Fromprofile,
		arg.Toprofile,
	)
	var i Organisationtransfer
	err := row.Scan(
		&i.ID,
		&i.Organisation,
		&i.Fromprofile,
		&i.Toprofile,
		&i.Completed,
		&i.Createdat,
	)
	return i, err
}

const deleteOrganisationTransfer = `-- name: DeleteOrganisationTransfer :one
DELETE FROM organisationTransfer
WHERE id = $1
    AND completed = false
RETURNING id, organisation, fromprofile, toprofile, completed, createdat
`

func (q *Queries) DeleteOrganisationTransfer(ctx context.Context, id uuid.UUID) (Organisationtransfer, error) {
	row := q.db.QueryRow(ctx, deleteOrganisationTransfer, id)
	var i Organisationtransfer
	err := row.Scan(
		&i.ID,
		&i.Organisation,
		&i.Fromprofile,
		&i.Toprofile,
		&i.Completed,
		&i.Createdat,
	)
	return i, err
}

const getActiveOrganisationTransfer = `-- name: GetActiveOrganisationTransfer :one
SELECT id, organisation, fromprofile, toprofile, completed, createdat
FROM organisationTransfer
WHERE organisation = $1
    AND completed = false
LIMIT 1
`

func (q *Queries) GetActiveOrganisationTransfer(ctx context.Context, organisation uuid.UUID) (Organisationtransfer, error) {
	row := q.db.QueryRow(ctx, getActiveOrganisationTransfer, organisation)
	var i Organisationtransfer
	err := row.Scan(
		&i.ID,
		&i.Organisation,
		&i.Fromprofile,
		&i.Toprofile,
		&i.Completed,
		&i.Createdat,
	)
	return i, err
}

const getIncomingOrganisationTransfers = `-- name: GetIncomingOrganisationTransfers :many
SELECT ot.id, ot.organisation, ot.fromprofile, ot.toprofile, ot.completed, ot.createdat,
    o.name as orgname,
    o.description,
    fp.name as profilename
FROM organisationTransfer ot
    INNER JOIN organisation o ON ot.organisation = o.id
    INNER JOIN profile fp ON ot.fromProfile = fp.id
WHERE toProfile = $1
    AND completed = false
`

type GetIncomingOrganisationTransfersRow struct {
	ID           uuid.UUID `json:"id"`
	Organisation uuid.UUID `json:"organisation"`
	Fromprofile  uuid.UUID `json:"fromprofile"`
	Toprofile    uuid.UUID `json:"toprofile"`
	Completed    bool      `json:"completed"`
	Createdat    time.Time `json:"createdat"`
	Orgname      string    `json:"orgname"`
	Description  string    `json:"description"`
	Profilename  string    `json:"profilename"`
}

func (q *Queries) GetIncomingOrganisationTransfers(ctx context.Context, toprofile uuid.UUID) ([]GetIncomingOrganisationTransfersRow, error) {
	rows, err := q.db.Query(ctx, getIncomingOrganisationTransfers, toprofile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetIncomingOrganisationTransfersRow{}
	for rows.Next() {
		var i GetIncomingOrganisationTransfersRow
		if err := rows.Scan(
			&i.ID,
			&i.Organisation,
			&i.Fromprofile,
			&i.Toprofile,
			&i.Completed,
			&i.Createdat,
			&i.Orgname,
			&i.Description,
			&i.Profilename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutgoingOrganisationTransfers = `-- name: GetOutgoingOrganisationTransfers :many
SELECT id, organisation, fromprofile, toprofile, completed, createdat
FROM organisationTransfer
WHERE fromProfile = $1
    AND completed = false
`

func (q *Queries) GetOutgoingOrganisationTransfers(ctx context.Context, fromprofile uuid.UUID) ([]Organisationtransfer, error) {
	rows, err := q.db.Query(ctx, getOutgoingOrganisationTransfers, fromprofile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organisationtransfer{}
	for rows.Next() {
		var i Organisationtransfer
		if err := rows.Scan(
			&i.ID,
			&i.Organisation,
			&i.Fromprofile,
			&i.Toprofile,
			&i.Completed,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
