// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: profile.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (id, name, email, password)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, password, verified, createdat, updatedat
`

type CreateProfileParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, name, email, password, verified, createdat, updatedat
FROM profile
WHERE id = $1
`

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE profile
SET password = $1,
    updatedAt = now()
WHERE id = $2
RETURNING id, name, email, password, verified, createdat, updatedat
`

type UpdatePasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updatePassword, arg.Password, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profile
SET name = $1,
    updatedAt = now()
WHERE id = $2
RETURNING id, name, email, password, verified, createdat, updatedat
`

type UpdateProfileParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile, arg.Name, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const verifyProfile = `-- name: VerifyProfile :one
UPDATE profile
SET verified = true,
    updatedAt = now()
WHERE id = $1
RETURNING id, name, email, password, verified, createdat, updatedat
`

func (q *Queries) VerifyProfile(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, verifyProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
