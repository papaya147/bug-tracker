// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Bugpriority string

const (
	BugpriorityURGENT Bugpriority = "URGENT"
	BugpriorityHIGH   Bugpriority = "HIGH"
	BugpriorityLOW    Bugpriority = "LOW"
)

func (e *Bugpriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Bugpriority(s)
	case string:
		*e = Bugpriority(s)
	default:
		return fmt.Errorf("unsupported scan type for Bugpriority: %T", src)
	}
	return nil
}

type NullBugpriority struct {
	Bugpriority Bugpriority `json:"bugpriority"`
	Valid       bool        `json:"valid"` // Valid is true if Bugpriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBugpriority) Scan(value interface{}) error {
	if value == nil {
		ns.Bugpriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Bugpriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBugpriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Bugpriority), nil
}

type Bugstatus string

const (
	BugstatusPENDING    Bugstatus = "PENDING"
	BugstatusPROCESSING Bugstatus = "PROCESSING"
)

func (e *Bugstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Bugstatus(s)
	case string:
		*e = Bugstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Bugstatus: %T", src)
	}
	return nil
}

type NullBugstatus struct {
	Bugstatus Bugstatus `json:"bugstatus"`
	Valid     bool      `json:"valid"` // Valid is true if Bugstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBugstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Bugstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Bugstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBugstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Bugstatus), nil
}

type Bug struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Description       string             `json:"description"`
	Status            Bugstatus          `json:"status"`
	Priority          Bugpriority        `json:"priority"`
	Assignedto        uuid.UUID          `json:"assignedto"`
	Assignedbyprofile uuid.UUID          `json:"assignedbyprofile"`
	Assignedbyteam    uuid.UUID          `json:"assignedbyteam"`
	Completed         bool               `json:"completed"`
	Createdat         time.Time          `json:"createdat"`
	Updatedat         time.Time          `json:"updatedat"`
	Closedby          pgtype.UUID        `json:"closedby"`
	Remarks           pgtype.Text        `json:"remarks"`
	Closedat          pgtype.Timestamptz `json:"closedat"`
}

type Organisation struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Owner       uuid.UUID `json:"owner"`
	Createdat   time.Time `json:"createdat"`
	Updatedat   time.Time `json:"updatedat"`
}

type Organisationtransfer struct {
	ID           uuid.UUID `json:"id"`
	Organisation uuid.UUID `json:"organisation"`
	Fromprofile  uuid.UUID `json:"fromprofile"`
	Toprofile    uuid.UUID `json:"toprofile"`
	Completed    bool      `json:"completed"`
	Createdat    time.Time `json:"createdat"`
}

type Profile struct {
	ID        uuid.UUID `json:"id"`
	Tokenid   uuid.UUID `json:"tokenid"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	Verified  bool      `json:"verified"`
	Createdat time.Time `json:"createdat"`
	Updatedat time.Time `json:"updatedat"`
}

type Team struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Description  string    `json:"description"`
	Organisation uuid.UUID `json:"organisation"`
	Createdat    time.Time `json:"createdat"`
	Updatedat    time.Time `json:"updatedat"`
}

type Teammember struct {
	Team      uuid.UUID `json:"team"`
	Profile   uuid.UUID `json:"profile"`
	Admin     bool      `json:"admin"`
	Createdat time.Time `json:"createdat"`
	Updatedat time.Time `json:"updatedat"`
}
