// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organisation.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO organisation(id, name, description, owner)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, owner, createdat, updatedat
`

type CreateOrganisationParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Owner       uuid.UUID `json:"owner"`
}

func (q *Queries) CreateOrganisation(ctx context.Context, arg CreateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrganisation,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Owner,
	)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Owner,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT id, name, description, owner, createdat, updatedat
FROM organisation
WHERE owner = $1
LIMIT 1
`

func (q *Queries) GetOrganisation(ctx context.Context, owner uuid.UUID) (Organisation, error) {
	row := q.db.QueryRow(ctx, getOrganisation, owner)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Owner,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateOrganisation = `-- name: UpdateOrganisation :one
UPDATE organisation
SET name = $1,
    description = $2,
    updatedAt = now()
WHERE owner = $3
RETURNING id, name, description, owner, createdat, updatedat
`

type UpdateOrganisationParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Owner       uuid.UUID `json:"owner"`
}

func (q *Queries) UpdateOrganisation(ctx context.Context, arg UpdateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, updateOrganisation, arg.Name, arg.Description, arg.Owner)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Owner,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateOrganisationOwner = `-- name: UpdateOrganisationOwner :one
UPDATE organisation
SET owner = $1,
    updatedAt = now()
WHERE id = $2
RETURNING id, name, description, owner, createdat, updatedat
`

type UpdateOrganisationOwnerParams struct {
	Owner uuid.UUID `json:"owner"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOrganisationOwner(ctx context.Context, arg UpdateOrganisationOwnerParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, updateOrganisationOwner, arg.Owner, arg.ID)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Owner,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
